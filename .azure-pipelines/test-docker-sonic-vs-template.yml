parameters:
- name: timeout
  type: number
  default: 180

- name: log_artifact_name
  type: string

jobs:
- job:
  displayName: vstest
  timeoutInMinutes: ${{ parameters.timeout }}

  pool: 'sonictest'

  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: docker-sonic-vs
    displayName: "Download docker sonic vs image"

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: sonic-swss-common.amd64.ubuntu20_04
    displayName: "Download sonic swss common deb packages"

  - checkout: self
    displayName: "Checkout sonic-swss-common"
  - checkout: sonic-swss
    displayName: "Checkout sonic-swss"

  - script: |
      sudo apt-get install -y python2.7 libpython2.7
      curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
      sudo python2.7 get-pip.py
    displayName: "Install Python2.7"

  - script: |
      set -x
      ls -l
      sudo sonic-swss-common/.azure-pipelines/build_and_install_module.sh

      sudo apt-get install -y libhiredis0.14
      sudo dpkg -i --force-confask,confnew ../libswsscommon_1.0.0_amd64.deb || sudo apt-get install -f
      sudo dpkg -i --force-confask,confnew ../python-swsscommon_1.0.0_amd64.deb || sudo apt-get install -f

      # install packages for vs test
      sudo apt-get install -y net-tools bridge-utils vlan
      pip --version
      sudo pip install pytest==4.6.2 attrs==19.1.0 exabgp==4.0.10 distro==1.5.0 docker==4.4.1 redis==3.3.4 flaky==3.7.0
    displayName: "Install dependencies"

  - script: |
      set -x
      sudo docker load -i ../docker-sonic-vs.gz
      docker ps
      ip netns list
      pushd sonic-swss/tests
      sudo py.test -v --force-flaky --junitxml=tr.xml --imgname=docker-sonic-vs:$(Build.DefinitionName).$(Build.BuildNumber)
    displayName: "Run vs tests"

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/tr.xml'
      testRunTitle: vstest
    condition: always()

  - script: |
      cp -r sonic-swss/tests/log $(Build.ArtifactStagingDirectory)/
    displayName: "Collect logs"
    condition: always()

  - publish: $(Build.ArtifactStagingDirectory)/
    artifact: ${{ parameters.log_artifact_name }}@$(System.JobAttempt)
    displayName: "Publish logs"
    condition: always()
